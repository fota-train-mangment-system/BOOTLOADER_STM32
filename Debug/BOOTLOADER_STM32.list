
BOOTLOADER_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ffc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001108  08001108  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001108  08001108  00011108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800110c  0800110c  0001110c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08001110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000c74  2000001c  0800112c  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000c90  0800112c  00020c90  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_line   00001261  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00001f40  00000000  00000000  000212a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000b16  00000000  00000000  000231e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000003e8  00000000  00000000  00023d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000320  00000000  00000000  000240e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000018dc  00000000  00000000  00024408  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000da1  00000000  00000000  00025ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00026a85  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000c5c  00000000  00000000  00026b04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	080010f0 	.word	0x080010f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	080010f0 	.word	0x080010f0

0800014c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800014c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000184 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000150:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000152:	e003      	b.n	800015c <LoopCopyDataInit>

08000154 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000154:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000156:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000158:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800015a:	3104      	adds	r1, #4

0800015c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800015c:	480b      	ldr	r0, [pc, #44]	; (800018c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800015e:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000160:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000162:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000164:	d3f6      	bcc.n	8000154 <CopyDataInit>
	ldr	r2, =_sbss
 8000166:	4a0b      	ldr	r2, [pc, #44]	; (8000194 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000168:	e002      	b.n	8000170 <LoopFillZerobss>

0800016a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800016a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800016c:	f842 3b04 	str.w	r3, [r2], #4

08000170 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000170:	4b09      	ldr	r3, [pc, #36]	; (8000198 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000172:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000174:	d3f9      	bcc.n	800016a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000176:	f000 fcab 	bl	8000ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800017a:	f000 ff95 	bl	80010a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800017e:	f000 f90b 	bl	8000398 <main>
	bx	lr
 8000182:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000184:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000188:	08001110 	.word	0x08001110
	ldr	r0, =_sdata
 800018c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000190:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8000194:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 8000198:	20000c90 	.word	0x20000c90

0800019c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800019c:	e7fe      	b.n	800019c <ADC1_2_IRQHandler>

0800019e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800019e:	b480      	push	{r7}
 80001a0:	af00      	add	r7, sp, #0
}
 80001a2:	bf00      	nop
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr

080001aa <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80001aa:	b480      	push	{r7}
 80001ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80001ae:	e7fe      	b.n	80001ae <HardFault_Handler+0x4>

080001b0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80001b4:	e7fe      	b.n	80001b4 <MemManage_Handler+0x4>

080001b6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80001b6:	b480      	push	{r7}
 80001b8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80001ba:	e7fe      	b.n	80001ba <BusFault_Handler+0x4>

080001bc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80001c0:	e7fe      	b.n	80001c0 <UsageFault_Handler+0x4>

080001c2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80001c2:	b480      	push	{r7}
 80001c4:	af00      	add	r7, sp, #0
}
 80001c6:	bf00      	nop
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr

080001ce <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80001ce:	b480      	push	{r7}
 80001d0:	af00      	add	r7, sp, #0
}
 80001d2:	bf00      	nop
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr

080001da <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80001da:	b480      	push	{r7}
 80001dc:	af00      	add	r7, sp, #0
}
 80001de:	bf00      	nop
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr

080001e6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80001e6:	b480      	push	{r7}
 80001e8:	af00      	add	r7, sp, #0
}
 80001ea:	bf00      	nop
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr

080001f2 <__disable_irq>:
#if !defined __VOLATILE
#define __VOLATILE inline
#endif

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 80001f2:	b480      	push	{r7}
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	b672      	cpsid	i
 80001f8:	bf00      	nop
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr

08000200 <Bootloader_Main>:
**
**===========================================================================
*/

void Bootloader_Main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	while(1)
	{

		msg.Buffer = buffer;
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <Bootloader_Main+0x28>)
 8000206:	4a09      	ldr	r2, [pc, #36]	; (800022c <Bootloader_Main+0x2c>)
 8000208:	605a      	str	r2, [r3, #4]
		if(MTP_ReceiveData(&msg, 0x00077ADB) == NO_ERR)
 800020a:	4909      	ldr	r1, [pc, #36]	; (8000230 <Bootloader_Main+0x30>)
 800020c:	4806      	ldr	r0, [pc, #24]	; (8000228 <Bootloader_Main+0x28>)
 800020e:	f000 fe01 	bl	8000e14 <MTP_ReceiveData>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d1f5      	bne.n	8000204 <Bootloader_Main+0x4>
		{
			CMD = msg.ID;
 8000218:	4b03      	ldr	r3, [pc, #12]	; (8000228 <Bootloader_Main+0x28>)
 800021a:	781a      	ldrb	r2, [r3, #0]
 800021c:	4b05      	ldr	r3, [pc, #20]	; (8000234 <Bootloader_Main+0x34>)
 800021e:	701a      	strb	r2, [r3, #0]
			Command_Process();
 8000220:	f000 f80a 	bl	8000238 <Command_Process>
		msg.Buffer = buffer;
 8000224:	e7ee      	b.n	8000204 <Bootloader_Main+0x4>
 8000226:	bf00      	nop
 8000228:	2000003c 	.word	0x2000003c
 800022c:	20000048 	.word	0x20000048
 8000230:	00077adb 	.word	0x00077adb
 8000234:	20000c00 	.word	0x20000c00

08000238 <Command_Process>:
	}

}

void Command_Process(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
	u32 address;
	u32 sp;
	switch (CMD)
 800023e:	4b4b      	ldr	r3, [pc, #300]	; (800036c <Command_Process+0x134>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	3b01      	subs	r3, #1
 8000244:	2b05      	cmp	r3, #5
 8000246:	f200 808d 	bhi.w	8000364 <Command_Process+0x12c>
 800024a:	a201      	add	r2, pc, #4	; (adr r2, 8000250 <Command_Process+0x18>)
 800024c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000250:	08000269 	.word	0x08000269
 8000254:	08000281 	.word	0x08000281
 8000258:	08000299 	.word	0x08000299
 800025c:	0800035f 	.word	0x0800035f
 8000260:	080002ed 	.word	0x080002ed
 8000264:	08000327 	.word	0x08000327
	{
	case CMD_FLASH_LOCK:
		Flash_Lock();
 8000268:	f000 f946 	bl	80004f8 <Flash_Lock>
		msg.ID = REPLY_ACK;
 800026c:	4b40      	ldr	r3, [pc, #256]	; (8000370 <Command_Process+0x138>)
 800026e:	2210      	movs	r2, #16
 8000270:	701a      	strb	r2, [r3, #0]
		msg.length = 0;
 8000272:	4b3f      	ldr	r3, [pc, #252]	; (8000370 <Command_Process+0x138>)
 8000274:	2200      	movs	r2, #0
 8000276:	811a      	strh	r2, [r3, #8]
		MTP_SendData(&msg);
 8000278:	483d      	ldr	r0, [pc, #244]	; (8000370 <Command_Process+0x138>)
 800027a:	f000 feb5 	bl	8000fe8 <MTP_SendData>
		break;
 800027e:	e071      	b.n	8000364 <Command_Process+0x12c>

	case CMD_FLASH_UNLOCK:
		Flash_Unlock();
 8000280:	f000 f956 	bl	8000530 <Flash_Unlock>
		msg.ID = REPLY_ACK;
 8000284:	4b3a      	ldr	r3, [pc, #232]	; (8000370 <Command_Process+0x138>)
 8000286:	2210      	movs	r2, #16
 8000288:	701a      	strb	r2, [r3, #0]
		msg.length = 0;
 800028a:	4b39      	ldr	r3, [pc, #228]	; (8000370 <Command_Process+0x138>)
 800028c:	2200      	movs	r2, #0
 800028e:	811a      	strh	r2, [r3, #8]
		MTP_SendData(&msg);
 8000290:	4837      	ldr	r0, [pc, #220]	; (8000370 <Command_Process+0x138>)
 8000292:	f000 fea9 	bl	8000fe8 <MTP_SendData>
		break;
 8000296:	e065      	b.n	8000364 <Command_Process+0x12c>

	case CMD_DATA_WRITE:
		if(Flash_WriteData((void *)*(u32*)(&(msg.Buffer[0])), &(msg.Buffer[4]), ((msg.length - 4) / 2) +  1) == NO_ERR)
 8000298:	4b35      	ldr	r3, [pc, #212]	; (8000370 <Command_Process+0x138>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4618      	mov	r0, r3
 80002a0:	4b33      	ldr	r3, [pc, #204]	; (8000370 <Command_Process+0x138>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	1d19      	adds	r1, r3, #4
 80002a6:	4b32      	ldr	r3, [pc, #200]	; (8000370 <Command_Process+0x138>)
 80002a8:	891b      	ldrh	r3, [r3, #8]
 80002aa:	3b04      	subs	r3, #4
 80002ac:	0fda      	lsrs	r2, r3, #31
 80002ae:	4413      	add	r3, r2
 80002b0:	105b      	asrs	r3, r3, #1
 80002b2:	b29b      	uxth	r3, r3
 80002b4:	3301      	adds	r3, #1
 80002b6:	b29b      	uxth	r3, r3
 80002b8:	461a      	mov	r2, r3
 80002ba:	f000 f887 	bl	80003cc <Flash_WriteData>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d109      	bne.n	80002d8 <Command_Process+0xa0>
		{
			msg.ID = REPLY_ACK;
 80002c4:	4b2a      	ldr	r3, [pc, #168]	; (8000370 <Command_Process+0x138>)
 80002c6:	2210      	movs	r2, #16
 80002c8:	701a      	strb	r2, [r3, #0]
			msg.length = 0;
 80002ca:	4b29      	ldr	r3, [pc, #164]	; (8000370 <Command_Process+0x138>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	811a      	strh	r2, [r3, #8]
			MTP_SendData(&msg);
 80002d0:	4827      	ldr	r0, [pc, #156]	; (8000370 <Command_Process+0x138>)
 80002d2:	f000 fe89 	bl	8000fe8 <MTP_SendData>
		{
			msg.ID = REPLY_ERR_WRITE_DATA;
			msg.length = 0;
			MTP_SendData(&msg);
		}
		break;
 80002d6:	e045      	b.n	8000364 <Command_Process+0x12c>
			msg.ID = REPLY_ERR_WRITE_DATA;
 80002d8:	4b25      	ldr	r3, [pc, #148]	; (8000370 <Command_Process+0x138>)
 80002da:	2213      	movs	r2, #19
 80002dc:	701a      	strb	r2, [r3, #0]
			msg.length = 0;
 80002de:	4b24      	ldr	r3, [pc, #144]	; (8000370 <Command_Process+0x138>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	811a      	strh	r2, [r3, #8]
			MTP_SendData(&msg);
 80002e4:	4822      	ldr	r0, [pc, #136]	; (8000370 <Command_Process+0x138>)
 80002e6:	f000 fe7f 	bl	8000fe8 <MTP_SendData>
		break;
 80002ea:	e03b      	b.n	8000364 <Command_Process+0x12c>

	case CMD_DATA_READ:
		break;

	case CMD_SECTOR_ERASE:
		if(Flash_ErasePage(*(u32*)(&(msg.Buffer[0]))) == NO_ERR)
 80002ec:	4b20      	ldr	r3, [pc, #128]	; (8000370 <Command_Process+0x138>)
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 f8be 	bl	8000474 <Flash_ErasePage>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d109      	bne.n	8000312 <Command_Process+0xda>
		{
			msg.ID = REPLY_ACK;
 80002fe:	4b1c      	ldr	r3, [pc, #112]	; (8000370 <Command_Process+0x138>)
 8000300:	2210      	movs	r2, #16
 8000302:	701a      	strb	r2, [r3, #0]
			msg.length = 0;
 8000304:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <Command_Process+0x138>)
 8000306:	2200      	movs	r2, #0
 8000308:	811a      	strh	r2, [r3, #8]
			MTP_SendData(&msg);
 800030a:	4819      	ldr	r0, [pc, #100]	; (8000370 <Command_Process+0x138>)
 800030c:	f000 fe6c 	bl	8000fe8 <MTP_SendData>
		{
			msg.ID = REPLY_NACK;
			msg.length = 0;
			MTP_SendData(&msg);
		}
		break;
 8000310:	e028      	b.n	8000364 <Command_Process+0x12c>
			msg.ID = REPLY_NACK;
 8000312:	4b17      	ldr	r3, [pc, #92]	; (8000370 <Command_Process+0x138>)
 8000314:	2211      	movs	r2, #17
 8000316:	701a      	strb	r2, [r3, #0]
			msg.length = 0;
 8000318:	4b15      	ldr	r3, [pc, #84]	; (8000370 <Command_Process+0x138>)
 800031a:	2200      	movs	r2, #0
 800031c:	811a      	strh	r2, [r3, #8]
			MTP_SendData(&msg);
 800031e:	4814      	ldr	r0, [pc, #80]	; (8000370 <Command_Process+0x138>)
 8000320:	f000 fe62 	bl	8000fe8 <MTP_SendData>
		break;
 8000324:	e01e      	b.n	8000364 <Command_Process+0x12c>

	case CMD_JUMP:
		address = *(u32*)(&(msg.Buffer[0]));
 8000326:	4b12      	ldr	r3, [pc, #72]	; (8000370 <Command_Process+0x138>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	607b      	str	r3, [r7, #4]
		sp = *((u32 *) address);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	603b      	str	r3, [r7, #0]
		__disable_irq();
 8000334:	f7ff ff5d 	bl	80001f2 <__disable_irq>
		if((sp & 0xF0000000) == 0x20000000)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800033e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000342:	d10e      	bne.n	8000362 <Command_Process+0x12a>
		{
			HardwareReset();
 8000344:	f000 f816 	bl	8000374 <HardwareReset>

			SCB_SetVectorTableOffset(address);
 8000348:	6878      	ldr	r0, [r7, #4]
 800034a:	f000 fabd 	bl	80008c8 <SCB_SetVectorTableOffset>

			JumpToApp(*((u32 *) (address + 4)), sp);
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	3304      	adds	r3, #4
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	6839      	ldr	r1, [r7, #0]
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f81a 	bl	8000390 <JumpToApp>
		}
		break;
 800035c:	e001      	b.n	8000362 <Command_Process+0x12a>
		break;
 800035e:	bf00      	nop
 8000360:	e000      	b.n	8000364 <Command_Process+0x12c>
		break;
 8000362:	bf00      	nop
	}
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000c00 	.word	0x20000c00
 8000370:	2000003c 	.word	0x2000003c

08000374 <HardwareReset>:

static void HardwareReset(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	RCC_ResetGPIOA();
 8000378:	f000 fa58 	bl	800082c <RCC_ResetGPIOA>
	RCC_ResetUART();
 800037c:	f000 fa84 	bl	8000888 <RCC_ResetUART>
	RCC_DisableGPIOA();
 8000380:	f000 fa66 	bl	8000850 <RCC_DisableGPIOA>
	RCC_DisableUART();
 8000384:	f000 fa92 	bl	80008ac <RCC_DisableUART>

	RCCSystemInit();
 8000388:	f000 f99e 	bl	80006c8 <RCCSystemInit>
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}

08000390 <JumpToApp>:

static void JumpToApp(u32 address, u32 sp)
{
	__ASM("msr msp, r1");
 8000390:	f381 8808 	msr	MSP, r1
	__ASM("bx r0");
 8000394:	4700      	bx	r0
}
 8000396:	bf00      	nop

08000398 <main>:
**===========================================================================
*/


int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	/* Initialize Message buffer */
	msg.Buffer = arr;
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <main+0x14>)
 800039e:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <main+0x18>)
 80003a0:	605a      	str	r2, [r3, #4]

	/* Message Transfer Protocol Initialization */
	MTP_Init();
 80003a2:	f000 fbb9 	bl	8000b18 <MTP_Init>

	/* Bootloader Application */
	Bootloader_Main();
 80003a6:	f7ff ff2b 	bl	8000200 <Bootloader_Main>

	while(1)
 80003aa:	e7fe      	b.n	80003aa <main+0x12>
 80003ac:	2000003c 	.word	0x2000003c
 80003b0:	20000c04 	.word	0x20000c04

080003b4 <Interrupts_EnableIRQ>:
    return NVIC_GetDevicePriority(IRQn);
  }
}

void Interrupts_EnableIRQ(s32 IRQn)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	NVIC_EnableIRQ(IRQn);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f000 f96d 	bl	800069c <NVIC_EnableIRQ>
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
	...

080003cc <Flash_WriteData>:
	}
	return Local_Error;
}

STD_ERR Flash_WriteData(volatile void * DestAddress, volatile void * SrcAddress, u16 NumberOfHalfWords)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b087      	sub	sp, #28
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	4613      	mov	r3, r2
 80003d8:	80fb      	strh	r3, [r7, #6]
	volatile STD_ERR Local_Error = ERR;
 80003da:	2301      	movs	r3, #1
 80003dc:	757b      	strb	r3, [r7, #21]
	u16 Local_Iterator = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	82fb      	strh	r3, [r7, #22]
	if(((u32) DestAddress >= FLASH_BASE) &&  ((u32) DestAddress <= FLASH_BASE + FLASH_LENGTH))
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80003e8:	d339      	bcc.n	800045e <Flash_WriteData+0x92>
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	4a1f      	ldr	r2, [pc, #124]	; (800046c <Flash_WriteData+0xa0>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d835      	bhi.n	800045e <Flash_WriteData+0x92>
	{
		while(FLASH->SR & FLASH_SR_BSY);
 80003f2:	bf00      	nop
 80003f4:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <Flash_WriteData+0xa4>)
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	f003 0301 	and.w	r3, r3, #1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d1f9      	bne.n	80003f4 <Flash_WriteData+0x28>
		FLASH->CR |= FLASH_CR_PG;
 8000400:	4a1b      	ldr	r2, [pc, #108]	; (8000470 <Flash_WriteData+0xa4>)
 8000402:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <Flash_WriteData+0xa4>)
 8000404:	691b      	ldr	r3, [r3, #16]
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	6113      	str	r3, [r2, #16]

		for(Local_Iterator = 0; Local_Iterator < NumberOfHalfWords; Local_Iterator++)
 800040c:	2300      	movs	r3, #0
 800040e:	82fb      	strh	r3, [r7, #22]
 8000410:	e019      	b.n	8000446 <Flash_WriteData+0x7a>
		{
			FLASH->CR |= FLASH_SR_EOP;
 8000412:	4a17      	ldr	r2, [pc, #92]	; (8000470 <Flash_WriteData+0xa4>)
 8000414:	4b16      	ldr	r3, [pc, #88]	; (8000470 <Flash_WriteData+0xa4>)
 8000416:	691b      	ldr	r3, [r3, #16]
 8000418:	f043 0320 	orr.w	r3, r3, #32
 800041c:	6113      	str	r3, [r2, #16]
			*(((u16 *)DestAddress) + Local_Iterator) = *(((u16 *)SrcAddress) + Local_Iterator);
 800041e:	8afb      	ldrh	r3, [r7, #22]
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	4413      	add	r3, r2
 8000426:	8afa      	ldrh	r2, [r7, #22]
 8000428:	0052      	lsls	r2, r2, #1
 800042a:	68b9      	ldr	r1, [r7, #8]
 800042c:	440a      	add	r2, r1
 800042e:	8812      	ldrh	r2, [r2, #0]
 8000430:	801a      	strh	r2, [r3, #0]
			while(FLASH->SR & FLASH_SR_BSY);
 8000432:	bf00      	nop
 8000434:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <Flash_WriteData+0xa4>)
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	f003 0301 	and.w	r3, r3, #1
 800043c:	2b00      	cmp	r3, #0
 800043e:	d1f9      	bne.n	8000434 <Flash_WriteData+0x68>
		for(Local_Iterator = 0; Local_Iterator < NumberOfHalfWords; Local_Iterator++)
 8000440:	8afb      	ldrh	r3, [r7, #22]
 8000442:	3301      	adds	r3, #1
 8000444:	82fb      	strh	r3, [r7, #22]
 8000446:	8afa      	ldrh	r2, [r7, #22]
 8000448:	88fb      	ldrh	r3, [r7, #6]
 800044a:	429a      	cmp	r2, r3
 800044c:	d3e1      	bcc.n	8000412 <Flash_WriteData+0x46>
		}

		FLASH->CR &= ~FLASH_CR_PG;
 800044e:	4a08      	ldr	r2, [pc, #32]	; (8000470 <Flash_WriteData+0xa4>)
 8000450:	4b07      	ldr	r3, [pc, #28]	; (8000470 <Flash_WriteData+0xa4>)
 8000452:	691b      	ldr	r3, [r3, #16]
 8000454:	f023 0301 	bic.w	r3, r3, #1
 8000458:	6113      	str	r3, [r2, #16]
		Local_Error = NO_ERR;
 800045a:	2300      	movs	r3, #0
 800045c:	757b      	strb	r3, [r7, #21]
	}
	else
	{
		// Do Nothing
	}
	return Local_Error;
 800045e:	7d7b      	ldrb	r3, [r7, #21]
 8000460:	b2db      	uxtb	r3, r3
}
 8000462:	4618      	mov	r0, r3
 8000464:	371c      	adds	r7, #28
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	08004000 	.word	0x08004000
 8000470:	40022000 	.word	0x40022000

08000474 <Flash_ErasePage>:

STD_ERR Flash_ErasePage(u32 PageAddress)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	STD_ERR Local_Error = ERR;
 800047c:	2301      	movs	r3, #1
 800047e:	73fb      	strb	r3, [r7, #15]

	/*Check that the address is within the Flash Range*/
	if((PageAddress >= FLASH_BASE )||(PageAddress <= (FLASH_BASE + FLASH_LENGTH)))
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000486:	d203      	bcs.n	8000490 <Flash_ErasePage+0x1c>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a19      	ldr	r2, [pc, #100]	; (80004f0 <Flash_ErasePage+0x7c>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d829      	bhi.n	80004e4 <Flash_ErasePage+0x70>
	{
		while(FLASH->SR & FLASH_SR_BSY);
 8000490:	bf00      	nop
 8000492:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <Flash_ErasePage+0x80>)
 8000494:	68db      	ldr	r3, [r3, #12]
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	2b00      	cmp	r3, #0
 800049c:	d1f9      	bne.n	8000492 <Flash_ErasePage+0x1e>
		FLASH->CR |= FLASH_CR_PER;
 800049e:	4a15      	ldr	r2, [pc, #84]	; (80004f4 <Flash_ErasePage+0x80>)
 80004a0:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <Flash_ErasePage+0x80>)
 80004a2:	691b      	ldr	r3, [r3, #16]
 80004a4:	f043 0302 	orr.w	r3, r3, #2
 80004a8:	6113      	str	r3, [r2, #16]
		FLASH->AR = PageAddress;
 80004aa:	4a12      	ldr	r2, [pc, #72]	; (80004f4 <Flash_ErasePage+0x80>)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	6153      	str	r3, [r2, #20]
		FLASH->CR |= FLASH_CR_STRT;
 80004b0:	4a10      	ldr	r2, [pc, #64]	; (80004f4 <Flash_ErasePage+0x80>)
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <Flash_ErasePage+0x80>)
 80004b4:	691b      	ldr	r3, [r3, #16]
 80004b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ba:	6113      	str	r3, [r2, #16]
		while(FLASH->SR & FLASH_SR_BSY);
 80004bc:	bf00      	nop
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <Flash_ErasePage+0x80>)
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d1f9      	bne.n	80004be <Flash_ErasePage+0x4a>

		if(  (*((volatile u32 *)PageAddress) ) == 0xffffffff )
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004d2:	d101      	bne.n	80004d8 <Flash_ErasePage+0x64>
		{
			Local_Error = NO_ERR;
 80004d4:	2300      	movs	r3, #0
 80004d6:	73fb      	strb	r3, [r7, #15]
		}

		FLASH->CR &= ~ (FLASH_CR_PER);
 80004d8:	4a06      	ldr	r2, [pc, #24]	; (80004f4 <Flash_ErasePage+0x80>)
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <Flash_ErasePage+0x80>)
 80004dc:	691b      	ldr	r3, [r3, #16]
 80004de:	f023 0302 	bic.w	r3, r3, #2
 80004e2:	6113      	str	r3, [r2, #16]
	}
	return Local_Error;
 80004e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	08004000 	.word	0x08004000
 80004f4:	40022000 	.word	0x40022000

080004f8 <Flash_Lock>:
	FLASH->CR |= FLASH_CR_STRT;
	FLASH->CR &= ~(FLASH_CR_MER);
}

STD_ERR Flash_Lock(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
	STD_ERR Local_Error = ERR;
 80004fe:	2301      	movs	r3, #1
 8000500:	71fb      	strb	r3, [r7, #7]
	FLASH->CR |= FLASH_CR_LOCK;
 8000502:	4a0a      	ldr	r2, [pc, #40]	; (800052c <Flash_Lock+0x34>)
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <Flash_Lock+0x34>)
 8000506:	691b      	ldr	r3, [r3, #16]
 8000508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800050c:	6113      	str	r3, [r2, #16]
	if(FLASH->CR & FLASH_CR_LOCK)
 800050e:	4b07      	ldr	r3, [pc, #28]	; (800052c <Flash_Lock+0x34>)
 8000510:	691b      	ldr	r3, [r3, #16]
 8000512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <Flash_Lock+0x26>
	{
		Local_Error = NO_ERR;
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]
	}
	return Local_Error;
 800051e:	79fb      	ldrb	r3, [r7, #7]
}
 8000520:	4618      	mov	r0, r3
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40022000 	.word	0x40022000

08000530 <Flash_Unlock>:

STD_ERR Flash_Unlock(void)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
	STD_ERR Local_Error = ERR;
 8000536:	2301      	movs	r3, #1
 8000538:	71fb      	strb	r3, [r7, #7]
	if(FLASH->CR & FLASH_CR_LOCK)
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <Flash_Unlock+0x34>)
 800053c:	691b      	ldr	r3, [r3, #16]
 800053e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000542:	2b00      	cmp	r3, #0
 8000544:	d007      	beq.n	8000556 <Flash_Unlock+0x26>
	{
		FLASH->KEYR = FLASH_KEY1;
 8000546:	4b07      	ldr	r3, [pc, #28]	; (8000564 <Flash_Unlock+0x34>)
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <Flash_Unlock+0x38>)
 800054a:	605a      	str	r2, [r3, #4]
		FLASH->KEYR = FLASH_KEY2;
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <Flash_Unlock+0x34>)
 800054e:	4a07      	ldr	r2, [pc, #28]	; (800056c <Flash_Unlock+0x3c>)
 8000550:	605a      	str	r2, [r3, #4]
		Local_Error = NO_ERR;
 8000552:	2300      	movs	r3, #0
 8000554:	71fb      	strb	r3, [r7, #7]
	}
	return Local_Error;
 8000556:	79fb      	ldrb	r3, [r7, #7]
}
 8000558:	4618      	mov	r0, r3
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40022000 	.word	0x40022000
 8000568:	45670123 	.word	0x45670123
 800056c:	cdef89ab 	.word	0xcdef89ab

08000570 <Flash_EnablePrefetchBuffer>:

void Flash_EnablePrefetchBuffer(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	/* Enable Prefetch Buffer */
	FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <Flash_EnablePrefetchBuffer+0x18>)
 8000576:	4b04      	ldr	r3, [pc, #16]	; (8000588 <Flash_EnablePrefetchBuffer+0x18>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f043 0310 	orr.w	r3, r3, #16
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	40022000 	.word	0x40022000

0800058c <Flash_SetLatency>:

STD_ERR Flash_SetLatency(u8 Latency)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	STD_ERR Local_Error = ERR;
 8000596:	2301      	movs	r3, #1
 8000598:	73fb      	strb	r3, [r7, #15]

	if(Latency <= FLASH_LATENCY_2)
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b02      	cmp	r3, #2
 800059e:	d80d      	bhi.n	80005bc <Flash_SetLatency+0x30>
	{
		/* Flash wait state */
		FLASH->ACR &= (u32)((u32)~FLASH_ACR_LATENCY);
 80005a0:	4a09      	ldr	r2, [pc, #36]	; (80005c8 <Flash_SetLatency+0x3c>)
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <Flash_SetLatency+0x3c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f023 0303 	bic.w	r3, r3, #3
 80005aa:	6013      	str	r3, [r2, #0]
		FLASH->ACR |= (u32)Latency;
 80005ac:	4906      	ldr	r1, [pc, #24]	; (80005c8 <Flash_SetLatency+0x3c>)
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <Flash_SetLatency+0x3c>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	600b      	str	r3, [r1, #0]
		Local_Error = NO_ERR;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
	else
	{
		/* Do Nothing */
	}

    return Local_Error;
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	40022000 	.word	0x40022000

080005cc <GPIO_Init>:
#include "GPIO_private.h"
#include "GPIO_config.h"
#include "GPIO_interface.h"

STD_ERR GPIO_Init(GPIO_t * gpio)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b087      	sub	sp, #28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	STD_ERR Local_ERROR = NO_ERR;
 80005d4:	2300      	movs	r3, #0
 80005d6:	75fb      	strb	r3, [r7, #23]
	__IO u32 * Register = &(((GPIO_TypeDef *)(gpio->Port))->CRL);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	613b      	str	r3, [r7, #16]
	u32 Local_Mode = gpio->Mode;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	60bb      	str	r3, [r7, #8]
	u32 Local_Pin = gpio->Pin;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	60fb      	str	r3, [r7, #12]

	if(Local_Pin <= GPIO_PIN_15)
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b0f      	cmp	r3, #15
 80005ee:	d84c      	bhi.n	800068a <GPIO_Init+0xbe>
	{
		if(Local_Pin >= GPIO_PIN_8)
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2b07      	cmp	r3, #7
 80005f4:	d906      	bls.n	8000604 <GPIO_Init+0x38>
		{
			Local_Pin -= GPIO_PIN_8;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	3b08      	subs	r3, #8
 80005fa:	60fb      	str	r3, [r7, #12]
			Register = &(((GPIO_TypeDef *)(gpio->Port))->CRH);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	3304      	adds	r3, #4
 8000602:	613b      	str	r3, [r7, #16]
		}

		if(Local_Mode <= GPIO_INPUT_PULLUP_PULLDOWN)
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	2b02      	cmp	r3, #2
 8000608:	d816      	bhi.n	8000638 <GPIO_Init+0x6c>
		{
			*Register &= ~(0x0F << (Local_Pin * 4));
 800060a:	693b      	ldr	r3, [r7, #16]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	0092      	lsls	r2, r2, #2
 8000612:	210f      	movs	r1, #15
 8000614:	fa01 f202 	lsl.w	r2, r1, r2
 8000618:	43d2      	mvns	r2, r2
 800061a:	401a      	ands	r2, r3
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	601a      	str	r2, [r3, #0]
			*Register |= (Local_Mode << ((Local_Pin * 4) + 2));
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	3302      	adds	r3, #2
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	fa01 f303 	lsl.w	r3, r1, r3
 8000630:	431a      	orrs	r2, r3
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	e02a      	b.n	800068e <GPIO_Init+0xc2>
		}
		else if(Local_Mode <= GPIO_OUTPUT_AF_OPEN_DRAIN)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	2b07      	cmp	r3, #7
 800063c:	d822      	bhi.n	8000684 <GPIO_Init+0xb8>
		{
			*Register &= ~(0x0F << (Local_Pin * 4));
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	0092      	lsls	r2, r2, #2
 8000646:	210f      	movs	r1, #15
 8000648:	fa01 f202 	lsl.w	r2, r1, r2
 800064c:	43d2      	mvns	r2, r2
 800064e:	401a      	ands	r2, r3
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	601a      	str	r2, [r3, #0]
			*Register |= ((Local_Mode & 0b11) << ((Local_Pin * 4) + 2));
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	f003 0103 	and.w	r1, r3, #3
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	3302      	adds	r3, #2
 8000664:	fa01 f303 	lsl.w	r3, r1, r3
 8000668:	431a      	orrs	r2, r3
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	601a      	str	r2, [r3, #0]
			*Register |= (GPIO_SPEED << (Local_Pin * 4));
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	0092      	lsls	r2, r2, #2
 8000676:	2103      	movs	r1, #3
 8000678:	fa01 f202 	lsl.w	r2, r1, r2
 800067c:	431a      	orrs	r2, r3
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	e004      	b.n	800068e <GPIO_Init+0xc2>
		}
		else
		{
			Local_ERROR = ERR;
 8000684:	2301      	movs	r3, #1
 8000686:	75fb      	strb	r3, [r7, #23]
 8000688:	e001      	b.n	800068e <GPIO_Init+0xc2>
		}
	}
	else
	{
		Local_ERROR = ERR;
 800068a:	2301      	movs	r3, #1
 800068c:	75fb      	strb	r3, [r7, #23]
	}
	return Local_ERROR;
 800068e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000690:	4618      	mov	r0, r3
 8000692:	371c      	adds	r7, #28
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
	...

0800069c <NVIC_EnableIRQ>:
#include "NVIC_interface.h"


/* Enable Interrupt */
void NVIC_EnableIRQ(s32 IRQn)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  NVIC->ISER[((u32)(IRQn) >> 5)] = (1 << ((u32)(IRQn) & 0x1F)); /* enable interrupt */
 80006a4:	4907      	ldr	r1, [pc, #28]	; (80006c4 <NVIC_EnableIRQ+0x28>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	095b      	lsrs	r3, r3, #5
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	f002 021f 	and.w	r2, r2, #31
 80006b0:	2001      	movs	r0, #1
 80006b2:	fa00 f202 	lsl.w	r2, r0, r2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	e000e100 	.word	0xe000e100

080006c8 <RCCSystemInit>:
#include "RCC_config.h"
#include "RCC_interface.h"


void RCCSystemInit (void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
 80006cc:	4a17      	ldr	r2, [pc, #92]	; (800072c <RCCSystemInit+0x64>)
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <RCCSystemInit+0x64>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while(RCC_CR_HSIRDY != (RCC_CR_HSIRDY & RCC->CR))
 80006d8:	bf00      	nop
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <RCCSystemInit+0x64>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d1f9      	bne.n	80006da <RCCSystemInit+0x12>
  {
	/* Waiting */
  }

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
  RCC->CFGR &= (u32)0xF8FF0000;
 80006e6:	4911      	ldr	r1, [pc, #68]	; (800072c <RCCSystemInit+0x64>)
 80006e8:	4b10      	ldr	r3, [pc, #64]	; (800072c <RCCSystemInit+0x64>)
 80006ea:	685a      	ldr	r2, [r3, #4]
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <RCCSystemInit+0x68>)
 80006ee:	4013      	ands	r3, r2
 80006f0:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (u32)0xFEF6FFFF;
 80006f2:	4a0e      	ldr	r2, [pc, #56]	; (800072c <RCCSystemInit+0x64>)
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <RCCSystemInit+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000700:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <RCCSystemInit+0x64>)
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <RCCSystemInit+0x64>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800070c:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
 800070e:	4a07      	ldr	r2, [pc, #28]	; (800072c <RCCSystemInit+0x64>)
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <RCCSystemInit+0x64>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000718:	6053      	str	r3, [r2, #4]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800071a:	4b04      	ldr	r3, [pc, #16]	; (800072c <RCCSystemInit+0x64>)
 800071c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000720:	609a      	str	r2, [r3, #8]
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000
 8000730:	f8ff0000 	.word	0xf8ff0000

08000734 <RCC_StartHSE>:

STD_ERR RCC_StartHSE(void)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
	__IO u32 Local_StartUpCounter = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
	__IO STD_ERR Local_Error = ERR;
 800073e:	2301      	movs	r3, #1
 8000740:	70fb      	strb	r3, [r7, #3]

	  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
	  /* Enable HSE */
	  RCC->CR |= ((u32)RCC_CR_HSEON);
 8000742:	4a11      	ldr	r2, [pc, #68]	; (8000788 <RCC_StartHSE+0x54>)
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <RCC_StartHSE+0x54>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800074c:	6013      	str	r3, [r2, #0]

	  /* Wait till HSE is ready and if Time out is reached exit */
	  do
	  {
	    Local_StartUpCounter++;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3301      	adds	r3, #1
 8000752:	607b      	str	r3, [r7, #4]
	  } while(((RCC->CR & RCC_CR_HSERDY) == 0) && (Local_StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <RCC_StartHSE+0x54>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075c:	2b00      	cmp	r3, #0
 800075e:	d103      	bne.n	8000768 <RCC_StartHSE+0x34>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000766:	d1f2      	bne.n	800074e <RCC_StartHSE+0x1a>

	  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <RCC_StartHSE+0x54>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <RCC_StartHSE+0x44>
	  {
		  Local_Error = NO_ERR;
 8000774:	2300      	movs	r3, #0
 8000776:	70fb      	strb	r3, [r7, #3]
	  else
	  {
		  /* Do Nothing */
	  }

	  return Local_Error;
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	b2db      	uxtb	r3, r3
}
 800077c:	4618      	mov	r0, r3
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <RCC_SetSystemClock72MHz>:

void RCC_SetSystemClock72MHz(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
	/* HCLK = SYSCLK */
	RCC->CFGR |= (u32)RCC_CFGR_HPRE_DIV1;
 8000790:	4a1e      	ldr	r2, [pc, #120]	; (800080c <RCC_SetSystemClock72MHz+0x80>)
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <RCC_SetSystemClock72MHz+0x80>)
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	6053      	str	r3, [r2, #4]

	/* PCLK2 = HCLK */
	RCC->CFGR |= (u32)RCC_CFGR_PPRE2_DIV1;
 8000798:	4a1c      	ldr	r2, [pc, #112]	; (800080c <RCC_SetSystemClock72MHz+0x80>)
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <RCC_SetSystemClock72MHz+0x80>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	6053      	str	r3, [r2, #4]

	/* PCLK1 = HCLK */
	RCC->CFGR |= (u32)RCC_CFGR_PPRE1_DIV2;
 80007a0:	4a1a      	ldr	r2, [pc, #104]	; (800080c <RCC_SetSystemClock72MHz+0x80>)
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <RCC_SetSystemClock72MHz+0x80>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007aa:	6053      	str	r3, [r2, #4]

	/*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
	RCC->CFGR &= (u32)((u32)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80007ac:	4a17      	ldr	r2, [pc, #92]	; (800080c <RCC_SetSystemClock72MHz+0x80>)
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <RCC_SetSystemClock72MHz+0x80>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80007b6:	6053      	str	r3, [r2, #4]
										RCC_CFGR_PLLMULL));
	///////////////////////////
	RCC->CFGR |= (u32)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80007b8:	4a14      	ldr	r2, [pc, #80]	; (800080c <RCC_SetSystemClock72MHz+0x80>)
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <RCC_SetSystemClock72MHz+0x80>)
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80007c2:	6053      	str	r3, [r2, #4]
	//RCC->CFGR |= (u32)(RCC_CFGR_PLLMULL9);
	//////////////////////////////////////////////////////////////////////////


	/* Enable PLL */
	RCC->CR |= RCC_CR_PLLON;
 80007c4:	4a11      	ldr	r2, [pc, #68]	; (800080c <RCC_SetSystemClock72MHz+0x80>)
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <RCC_SetSystemClock72MHz+0x80>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007ce:	6013      	str	r3, [r2, #0]

	/* Wait till PLL is ready */
	while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80007d0:	bf00      	nop
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <RCC_SetSystemClock72MHz+0x80>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0f9      	beq.n	80007d2 <RCC_SetSystemClock72MHz+0x46>
	{
	}

	/* Select PLL as system clock source */
	RCC->CFGR &= (u32)((u32)~(RCC_CFGR_SW));
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <RCC_SetSystemClock72MHz+0x80>)
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <RCC_SetSystemClock72MHz+0x80>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	f023 0303 	bic.w	r3, r3, #3
 80007e8:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (u32)RCC_CFGR_SW_PLL;
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <RCC_SetSystemClock72MHz+0x80>)
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <RCC_SetSystemClock72MHz+0x80>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6053      	str	r3, [r2, #4]

	/* Wait till PLL is used as system clock source */
	while ((RCC->CFGR & (u32)RCC_CFGR_SWS) != (u32)0x08)
 80007f6:	bf00      	nop
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <RCC_SetSystemClock72MHz+0x80>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f003 030c 	and.w	r3, r3, #12
 8000800:	2b08      	cmp	r3, #8
 8000802:	d1f9      	bne.n	80007f8 <RCC_SetSystemClock72MHz+0x6c>
	{
	}
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	40021000 	.word	0x40021000

08000810 <RCC_EnableGPIOA>:

	  return SystemCoreClock;
}

void RCC_EnableGPIOA(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
	RCC->APB2ENR	|= RCC_APB2ENR_IOPAEN;
 8000814:	4a04      	ldr	r2, [pc, #16]	; (8000828 <RCC_EnableGPIOA+0x18>)
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <RCC_EnableGPIOA+0x18>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	6193      	str	r3, [r2, #24]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40021000 	.word	0x40021000

0800082c <RCC_ResetGPIOA>:

void RCC_ResetGPIOA(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
	RCC->APB2RSTR	|= RCC_APB2RSTR_IOPARST;
 8000830:	4a06      	ldr	r2, [pc, #24]	; (800084c <RCC_ResetGPIOA+0x20>)
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <RCC_ResetGPIOA+0x20>)
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	60d3      	str	r3, [r2, #12]
	RCC->APB2RSTR = 0;
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <RCC_ResetGPIOA+0x20>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000

08000850 <RCC_DisableGPIOA>:

void RCC_DisableGPIOA(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
	RCC->APB2ENR	&= ~RCC_APB2ENR_IOPAEN;
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <RCC_DisableGPIOA+0x18>)
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <RCC_DisableGPIOA+0x18>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f023 0304 	bic.w	r3, r3, #4
 800085e:	6193      	str	r3, [r2, #24]
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	40021000 	.word	0x40021000

0800086c <RCC_EnableUART>:
{
	RCC->APB2ENR	&= ~RCC_APB2ENR_IOPCEN;
}

void RCC_EnableUART(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
	RCC->APB2ENR	|= RCC_APB2ENR_USART1EN;
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <RCC_EnableUART+0x18>)
 8000872:	4b04      	ldr	r3, [pc, #16]	; (8000884 <RCC_EnableUART+0x18>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087a:	6193      	str	r3, [r2, #24]
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40021000 	.word	0x40021000

08000888 <RCC_ResetUART>:

void RCC_ResetUART(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
	RCC->APB2RSTR	|= RCC_APB2RSTR_USART1RST;
 800088c:	4a06      	ldr	r2, [pc, #24]	; (80008a8 <RCC_ResetUART+0x20>)
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <RCC_ResetUART+0x20>)
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000896:	60d3      	str	r3, [r2, #12]
	RCC->APB2RSTR = 0;
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <RCC_ResetUART+0x20>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <RCC_DisableUART>:

void RCC_DisableUART(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
	RCC->APB2ENR	&= ~RCC_APB2ENR_USART1EN;
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <RCC_DisableUART+0x18>)
 80008b2:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <RCC_DisableUART+0x18>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008ba:	6193      	str	r3, [r2, #24]
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	40021000 	.word	0x40021000

080008c8 <SCB_SetVectorTableOffset>:
#include "SCB_config.h"
#include "SCB_interface.h"

/* Set Offset of Vector Table */
void SCB_SetVectorTableOffset(u32 Address)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	__ASM("DMB");
 80008d0:	f3bf 8f5f 	dmb	sy
	SCB->VTOR =	Address;
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <SCB_SetVectorTableOffset+0x20>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6093      	str	r3, [r2, #8]
	__ASM("DSB");
 80008da:	f3bf 8f4f 	dsb	sy
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <UART_Init>:
#include "UART_interface.h"



void UART_Init(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

	/* Reset all registers */
	USART1->CR1 = 0x0;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	819a      	strh	r2, [r3, #12]
	USART1->CR2 = 0x0;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	821a      	strh	r2, [r3, #16]
	USART1->CR3 = 0x0;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	829a      	strh	r2, [r3, #20]

	/* Select 1 Start bit, 8 or 9 Data bits, n Stop bit */
#ifdef CONFIG_9BITS_DATA
	USART1->CR1 |= USART_CR1_M;
 8000902:	4a10      	ldr	r2, [pc, #64]	; (8000944 <UART_Init+0x58>)
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <UART_Init+0x58>)
 8000906:	899b      	ldrh	r3, [r3, #12]
 8000908:	b29b      	uxth	r3, r3
 800090a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800090e:	b29b      	uxth	r3, r3
 8000910:	8193      	strh	r3, [r2, #12]
#ifdef CONFIG_1_0_STOP_BIT
	USART1->CR2 &= ~USART_CR2_STOP;
#elif defined CONFIG_1_5_STOP_BIT
	USART1->CR2 |= USART_CR2_STOP_0 | USART_CR2_STOP_1;
#elif defined CONFIG_2_0_STOP_BIT
	USART1->CR2 |= USART_CR2_STOP_1;
 8000912:	4a0c      	ldr	r2, [pc, #48]	; (8000944 <UART_Init+0x58>)
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <UART_Init+0x58>)
 8000916:	8a1b      	ldrh	r3, [r3, #16]
 8000918:	b29b      	uxth	r3, r3
 800091a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800091e:	b29b      	uxth	r3, r3
 8000920:	8213      	strh	r3, [r2, #16]
	USART1->CR1 |= USART_CR1_PCE;
#endif

	/* Select odd parity */
#ifdef CONFIG_ODD_PARITY
	USART1->CR1 |= USART_CR1_PS;
 8000922:	4a08      	ldr	r2, [pc, #32]	; (8000944 <UART_Init+0x58>)
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <UART_Init+0x58>)
 8000926:	899b      	ldrh	r3, [r3, #12]
 8000928:	b29b      	uxth	r3, r3
 800092a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800092e:	b29b      	uxth	r3, r3
 8000930:	8193      	strh	r3, [r2, #12]
#endif

	/* Set baud rate */
	USART1->BRR = (CONFIG_DIV_MANTISSA << 4) | (CONFIG_DIV_FRACTION & 0x0000000F);
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <UART_Init+0x58>)
 8000934:	f240 227a 	movw	r2, #634	; 0x27a
 8000938:	811a      	strh	r2, [r3, #8]
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40013800 	.word	0x40013800

08000948 <UART_Enable>:

void UART_Enable(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
	/* Enable USART1 */
	USART1->CR1 |= USART_CR1_UE;
 800094c:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <UART_Enable+0x5c>)
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <UART_Enable+0x5c>)
 8000950:	899b      	ldrh	r3, [r3, #12]
 8000952:	b29b      	uxth	r3, r3
 8000954:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000958:	b29b      	uxth	r3, r3
 800095a:	8193      	strh	r3, [r2, #12]

	/* Enable transmitter */
	USART1->CR1 |= USART_CR1_TE;
 800095c:	4a11      	ldr	r2, [pc, #68]	; (80009a4 <UART_Enable+0x5c>)
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <UART_Enable+0x5c>)
 8000960:	899b      	ldrh	r3, [r3, #12]
 8000962:	b29b      	uxth	r3, r3
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	b29b      	uxth	r3, r3
 800096a:	8193      	strh	r3, [r2, #12]

	/* Enable receiver */
	USART1->CR1 |= USART_CR1_RE;
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <UART_Enable+0x5c>)
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <UART_Enable+0x5c>)
 8000970:	899b      	ldrh	r3, [r3, #12]
 8000972:	b29b      	uxth	r3, r3
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	b29b      	uxth	r3, r3
 800097a:	8193      	strh	r3, [r2, #12]

	/* Enable reception buffer not empty flag interrupt */
	USART1->CR1 |= USART_CR1_RXNEIE;
 800097c:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <UART_Enable+0x5c>)
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <UART_Enable+0x5c>)
 8000980:	899b      	ldrh	r3, [r3, #12]
 8000982:	b29b      	uxth	r3, r3
 8000984:	f043 0320 	orr.w	r3, r3, #32
 8000988:	b29b      	uxth	r3, r3
 800098a:	8193      	strh	r3, [r2, #12]

	/* Enable Transmission completed interrupt */
	USART1->CR1 |= USART_CR1_TCIE;
 800098c:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <UART_Enable+0x5c>)
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <UART_Enable+0x5c>)
 8000990:	899b      	ldrh	r3, [r3, #12]
 8000992:	b29b      	uxth	r3, r3
 8000994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000998:	b29b      	uxth	r3, r3
 800099a:	8193      	strh	r3, [r2, #12]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	40013800 	.word	0x40013800

080009a8 <UART_Disable>:

void UART_Disable(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
	/* Disable USART1 */
	USART1->CR1 &= ~USART_CR1_UE;
 80009ac:	4a15      	ldr	r2, [pc, #84]	; (8000a04 <UART_Disable+0x5c>)
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <UART_Disable+0x5c>)
 80009b0:	899b      	ldrh	r3, [r3, #12]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	8193      	strh	r3, [r2, #12]

	/* Disable transmitter */
	USART1->CR1 &= ~USART_CR1_TE;
 80009bc:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <UART_Disable+0x5c>)
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <UART_Disable+0x5c>)
 80009c0:	899b      	ldrh	r3, [r3, #12]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	f023 0308 	bic.w	r3, r3, #8
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	8193      	strh	r3, [r2, #12]

	/* Disable receiver */
	USART1->CR1 &= ~USART_CR1_RE;
 80009cc:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <UART_Disable+0x5c>)
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <UART_Disable+0x5c>)
 80009d0:	899b      	ldrh	r3, [r3, #12]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	f023 0304 	bic.w	r3, r3, #4
 80009d8:	b29b      	uxth	r3, r3
 80009da:	8193      	strh	r3, [r2, #12]

	/* Disable reception buffer not empty flag interrupt */
	USART1->CR1 &= ~USART_CR1_RXNEIE;
 80009dc:	4a09      	ldr	r2, [pc, #36]	; (8000a04 <UART_Disable+0x5c>)
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <UART_Disable+0x5c>)
 80009e0:	899b      	ldrh	r3, [r3, #12]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	f023 0320 	bic.w	r3, r3, #32
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	8193      	strh	r3, [r2, #12]

	/* Disable Transmission completed interrupt */
	USART1->CR1 &= ~USART_CR1_TCIE;
 80009ec:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <UART_Disable+0x5c>)
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <UART_Disable+0x5c>)
 80009f0:	899b      	ldrh	r3, [r3, #12]
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	8193      	strh	r3, [r2, #12]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	40013800 	.word	0x40013800

08000a08 <UART_WriteToBuffer>:
	USART1->DR = (u16) Byte;
	while(!(USART1->SR & USART_SR_TXE));
}

void UART_WriteToBuffer(u8 Byte)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	USART1->DR = (u16) Byte;
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <UART_WriteToBuffer+0x1c>)
 8000a14:	79fa      	ldrb	r2, [r7, #7]
 8000a16:	b292      	uxth	r2, r2
 8000a18:	809a      	strh	r2, [r3, #4]
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	40013800 	.word	0x40013800

08000a28 <UART_ReadBuffer>:
	while(!(USART1->SR & USART_SR_RXNE));
	return (u8) USART1->DR;
}

u8 UART_ReadBuffer(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
	return (u8) USART1->DR;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <UART_ReadBuffer+0x14>)
 8000a2e:	889b      	ldrh	r3, [r3, #4]
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	b2db      	uxtb	r3, r3
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	40013800 	.word	0x40013800

08000a40 <UART_SetInterruptHandler>:
		buf++;
	}
}

void UART_SetInterruptHandler(void (*Handler)(u8))
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	USART1_func = Handler;
 8000a48:	4a03      	ldr	r2, [pc, #12]	; (8000a58 <UART_SetInterruptHandler+0x18>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6013      	str	r3, [r2, #0]
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	20000c68 	.word	0x20000c68

08000a5c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
	u8 flags = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	71fb      	strb	r3, [r7, #7]
	if(USART1->SR & USART_SR_RXNE)
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <USART1_IRQHandler+0x6c>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	f003 0320 	and.w	r3, r3, #32
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <USART1_IRQHandler+0x20>
	{
		flags |= UART_RXNE_FLAG;
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	71fb      	strb	r3, [r7, #7]
	}
	if(USART1->SR & USART_SR_TC)
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <USART1_IRQHandler+0x6c>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d003      	beq.n	8000a92 <USART1_IRQHandler+0x36>
	{
		flags |= UART_TC_FLAG;
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	71fb      	strb	r3, [r7, #7]
	}
	if(USART1->SR & USART_SR_PE)
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <USART1_IRQHandler+0x6c>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <USART1_IRQHandler+0x4c>
	{
		flags |= UART_PE_FLAG;
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	71fb      	strb	r3, [r7, #7]
	}
	if(USART1_func)
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <USART1_IRQHandler+0x70>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d004      	beq.n	8000aba <USART1_IRQHandler+0x5e>
	{
		USART1_func(flags);
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <USART1_IRQHandler+0x70>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	79fa      	ldrb	r2, [r7, #7]
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4798      	blx	r3
	}
	USART1->SR = 0;
 8000aba:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <USART1_IRQHandler+0x6c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	801a      	strh	r2, [r3, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40013800 	.word	0x40013800
 8000acc:	20000c68 	.word	0x20000c68

08000ad0 <SystemInit>:
  * Initialize the Embedded Flash Interface, the PLL and update the
  * SystemCoreClock variable.
  */

void SystemInit (void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	RCCSystemInit();
 8000ad4:	f7ff fdf8 	bl	80006c8 <RCCSystemInit>

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
#ifdef SYSCLK_FREQ_72MHz
	SetSysClockTo72();
 8000ad8:	f000 f806 	bl	8000ae8 <SetSysClockTo72>
#endif

	SCB_SetVectorTableOffset(FLASH_BASE | VECT_TAB_OFFSET); /* Vector Table Relocation in Internal FLASH. */
 8000adc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000ae0:	f7ff fef2 	bl	80008c8 <SCB_SetVectorTableOffset>
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <SetSysClockTo72>:
/**
  * Sets System clock frequency to 72MHz and configure HCLK, PCLK2
  * and PCLK1 prescalers.
  */
static void SetSysClockTo72(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
  __IO STD_ERR HSEStatus = ERR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	71fb      	strb	r3, [r7, #7]

  HSEStatus = RCC_StartHSE();
 8000af2:	f7ff fe1f 	bl	8000734 <RCC_StartHSE>
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]

  if (HSEStatus == NO_ERR)
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d106      	bne.n	8000b10 <SetSysClockTo72+0x28>
  {
	Flash_EnablePrefetchBuffer();
 8000b02:	f7ff fd35 	bl	8000570 <Flash_EnablePrefetchBuffer>
	Flash_SetLatency(FLASH_LATENCY_2);
 8000b06:	2002      	movs	r0, #2
 8000b08:	f7ff fd40 	bl	800058c <Flash_SetLatency>
	RCC_SetSystemClock72MHz();
 8000b0c:	f7ff fe3e 	bl	800078c <RCC_SetSystemClock72MHz>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <MTP_Init>:
//           //        //             //             //                            //               //               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* MTP Initialization */
void MTP_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
	u8 Local_Iterator = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	71fb      	strb	r3, [r7, #7]
	RCC_EnableGPIOA();
 8000b22:	f7ff fe75 	bl	8000810 <RCC_EnableGPIOA>
	RCC_EnableUART();
 8000b26:	f7ff fea1 	bl	800086c <RCC_EnableUART>

	for(Local_Iterator = 0; Local_Iterator < sizeof(UARTPins)/sizeof(GPIO_t); Local_Iterator++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	e00c      	b.n	8000b4a <MTP_Init+0x32>
	{
		GPIO_Init(&UARTPins[Local_Iterator]);
 8000b30:	79fa      	ldrb	r2, [r7, #7]
 8000b32:	4613      	mov	r3, r2
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	4413      	add	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <MTP_Init+0x50>)
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fd44 	bl	80005cc <GPIO_Init>
	for(Local_Iterator = 0; Local_Iterator < sizeof(UARTPins)/sizeof(GPIO_t); Local_Iterator++)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	3301      	adds	r3, #1
 8000b48:	71fb      	strb	r3, [r7, #7]
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d9ef      	bls.n	8000b30 <MTP_Init+0x18>
	}

	UART_Init();
 8000b50:	f7ff fecc 	bl	80008ec <UART_Init>

	UART_SetInterruptHandler(MTP_Notify);
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MTP_Init+0x54>)
 8000b56:	f7ff ff73 	bl	8000a40 <UART_SetInterruptHandler>

	Interrupts_EnableIRQ(UART_IRQ);
 8000b5a:	2025      	movs	r0, #37	; 0x25
 8000b5c:	f7ff fc2a 	bl	80003b4 <Interrupts_EnableIRQ>

}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000004 	.word	0x20000004
 8000b6c:	08000b71 	.word	0x08000b71

08000b70 <MTP_Notify>:

void MTP_Notify(u8 flags)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
	if(flags & UART_RXNE_FLAG)
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d010      	beq.n	8000ba6 <MTP_Notify+0x36>
	{
		ReceivedByte = UART_ReadBuffer();
 8000b84:	f7ff ff50 	bl	8000a28 <UART_ReadBuffer>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <MTP_Notify+0x74>)
 8000b8e:	701a      	strb	r2, [r3, #0]
		ReceivedByteState = BYTE_RECEIVED;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MTP_Notify+0x78>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
		if(flags & UART_PE_FLAG)
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d002      	beq.n	8000ba6 <MTP_Notify+0x36>
		{
			ReceiveProcessState = FAILED;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MTP_Notify+0x7c>)
 8000ba2:	2211      	movs	r2, #17
 8000ba4:	701a      	strb	r2, [r3, #0]
		}
	}
	if(flags & UART_TC_FLAG)
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d015      	beq.n	8000bdc <MTP_Notify+0x6c>
	{
		if(SentByteState == SENDING_BYTE)
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MTP_Notify+0x80>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d108      	bne.n	8000bcc <MTP_Notify+0x5c>
		{
			UART_WriteToBuffer(ByteToSend);
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MTP_Notify+0x84>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ff22 	bl	8000a08 <UART_WriteToBuffer>
			SentByteState = BUFFER_EMPTY;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <MTP_Notify+0x80>)
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	701a      	strb	r2, [r3, #0]
		{
			SentByteState = UNINITIALIZED;
		}
	}

}
 8000bca:	e007      	b.n	8000bdc <MTP_Notify+0x6c>
		else if(SentByteState == FINISHED)
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MTP_Notify+0x80>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d102      	bne.n	8000bdc <MTP_Notify+0x6c>
			SentByteState = UNINITIALIZED;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MTP_Notify+0x80>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000c78 	.word	0x20000c78
 8000be8:	2000003a 	.word	0x2000003a
 8000bec:	20000038 	.word	0x20000038
 8000bf0:	2000003b 	.word	0x2000003b
 8000bf4:	20000c8c 	.word	0x20000c8c

08000bf8 <MTP_ReceiveProcess>:

void MTP_ReceiveProcess(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
	u32 Local_Iterator = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
	u16 Local_DataCounter = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	817b      	strh	r3, [r7, #10]
	u16 Local_CHKCounter = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	813b      	strh	r3, [r7, #8]
	u16 Local_CheckSum = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	80fb      	strh	r3, [r7, #6]
	u8 * Local_DataBuffer = RXFrameBuffer.Buffer;
 8000c0e:	4b7b      	ldr	r3, [pc, #492]	; (8000dfc <MTP_ReceiveProcess+0x204>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	603b      	str	r3, [r7, #0]
	ReceiveProcessState = WAITING;
 8000c14:	4b7a      	ldr	r3, [pc, #488]	; (8000e00 <MTP_ReceiveProcess+0x208>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		if(ReceiveProcessState == WAITING)
 8000c1a:	4b79      	ldr	r3, [pc, #484]	; (8000e00 <MTP_ReceiveProcess+0x208>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d108      	bne.n	8000c36 <MTP_ReceiveProcess+0x3e>
		{
			if(Local_Iterator >= MTPCyclesToBreak)
 8000c24:	4b77      	ldr	r3, [pc, #476]	; (8000e04 <MTP_ReceiveProcess+0x20c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	68fa      	ldr	r2, [r7, #12]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d30c      	bcc.n	8000c48 <MTP_ReceiveProcess+0x50>
			{
				ReceiveProcessState = NO_FRAME_RECEIVED;
 8000c2e:	4b74      	ldr	r3, [pc, #464]	; (8000e00 <MTP_ReceiveProcess+0x208>)
 8000c30:	2202      	movs	r2, #2
 8000c32:	701a      	strb	r2, [r3, #0]
 8000c34:	e008      	b.n	8000c48 <MTP_ReceiveProcess+0x50>
			}
		}
		else if(Local_Iterator >= MTPWaitCycles)
 8000c36:	4b74      	ldr	r3, [pc, #464]	; (8000e08 <MTP_ReceiveProcess+0x210>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d303      	bcc.n	8000c48 <MTP_ReceiveProcess+0x50>
		{
			ReceiveProcessState = FAILED;
 8000c40:	4b6f      	ldr	r3, [pc, #444]	; (8000e00 <MTP_ReceiveProcess+0x208>)
 8000c42:	2211      	movs	r2, #17
 8000c44:	701a      	strb	r2, [r3, #0]
			break;
 8000c46:	e0d4      	b.n	8000df2 <MTP_ReceiveProcess+0x1fa>
		}

		if(ReceivedByteState == BYTE_RECEIVED)
 8000c48:	4b70      	ldr	r3, [pc, #448]	; (8000e0c <MTP_ReceiveProcess+0x214>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	f040 80cb 	bne.w	8000dea <MTP_ReceiveProcess+0x1f2>
		{
			Local_Iterator = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
			ReceivedByteState = NO_DATA;
 8000c58:	4b6c      	ldr	r3, [pc, #432]	; (8000e0c <MTP_ReceiveProcess+0x214>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]

			switch(ReceiveProcessState)
 8000c5e:	4b68      	ldr	r3, [pc, #416]	; (8000e00 <MTP_ReceiveProcess+0x208>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	3b01      	subs	r3, #1
 8000c66:	2b0c      	cmp	r3, #12
 8000c68:	f200 80b5 	bhi.w	8000dd6 <MTP_ReceiveProcess+0x1de>
 8000c6c:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <MTP_ReceiveProcess+0x7c>)
 8000c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c72:	bf00      	nop
 8000c74:	08000ca9 	.word	0x08000ca9
 8000c78:	08000dd7 	.word	0x08000dd7
 8000c7c:	08000cbb 	.word	0x08000cbb
 8000c80:	08000dd7 	.word	0x08000dd7
 8000c84:	08000ccb 	.word	0x08000ccb
 8000c88:	08000dd7 	.word	0x08000dd7
 8000c8c:	08000cdd 	.word	0x08000cdd
 8000c90:	08000dd7 	.word	0x08000dd7
 8000c94:	08000d0d 	.word	0x08000d0d
 8000c98:	08000dd7 	.word	0x08000dd7
 8000c9c:	08000d33 	.word	0x08000d33
 8000ca0:	08000dd7 	.word	0x08000dd7
 8000ca4:	08000d45 	.word	0x08000d45
			{
			case WAITING:
				if(ReceivedByte == MTP_START_BYTE)
 8000ca8:	4b59      	ldr	r3, [pc, #356]	; (8000e10 <MTP_ReceiveProcess+0x218>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b25      	cmp	r3, #37	; 0x25
 8000cae:	f040 8099 	bne.w	8000de4 <MTP_ReceiveProcess+0x1ec>
				{
					ReceiveProcessState = START_BYTE_RECEIVED;
 8000cb2:	4b53      	ldr	r3, [pc, #332]	; (8000e00 <MTP_ReceiveProcess+0x208>)
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000cb8:	e094      	b.n	8000de4 <MTP_ReceiveProcess+0x1ec>

			case START_BYTE_RECEIVED:
				RXFrameBuffer.ID = ReceivedByte;
 8000cba:	4b55      	ldr	r3, [pc, #340]	; (8000e10 <MTP_ReceiveProcess+0x218>)
 8000cbc:	781a      	ldrb	r2, [r3, #0]
 8000cbe:	4b4f      	ldr	r3, [pc, #316]	; (8000dfc <MTP_ReceiveProcess+0x204>)
 8000cc0:	701a      	strb	r2, [r3, #0]
				ReceiveProcessState = ID_RECEIVED;
 8000cc2:	4b4f      	ldr	r3, [pc, #316]	; (8000e00 <MTP_ReceiveProcess+0x208>)
 8000cc4:	2205      	movs	r2, #5
 8000cc6:	701a      	strb	r2, [r3, #0]
				break;
 8000cc8:	e08f      	b.n	8000dea <MTP_ReceiveProcess+0x1f2>

			case ID_RECEIVED:
				RXFrameBuffer.length = ReceivedByte;
 8000cca:	4b51      	ldr	r3, [pc, #324]	; (8000e10 <MTP_ReceiveProcess+0x218>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <MTP_ReceiveProcess+0x204>)
 8000cd2:	805a      	strh	r2, [r3, #2]
				ReceiveProcessState = LENGTH_BYTE_0_RECEIVED;
 8000cd4:	4b4a      	ldr	r3, [pc, #296]	; (8000e00 <MTP_ReceiveProcess+0x208>)
 8000cd6:	2207      	movs	r2, #7
 8000cd8:	701a      	strb	r2, [r3, #0]
				break;
 8000cda:	e086      	b.n	8000dea <MTP_ReceiveProcess+0x1f2>

			case LENGTH_BYTE_0_RECEIVED:
				RXFrameBuffer.length |= (((u16)ReceivedByte) << 8);
 8000cdc:	4b47      	ldr	r3, [pc, #284]	; (8000dfc <MTP_ReceiveProcess+0x204>)
 8000cde:	885b      	ldrh	r3, [r3, #2]
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	4b4b      	ldr	r3, [pc, #300]	; (8000e10 <MTP_ReceiveProcess+0x218>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	021b      	lsls	r3, r3, #8
 8000ce8:	b21b      	sxth	r3, r3
 8000cea:	4313      	orrs	r3, r2
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	4b42      	ldr	r3, [pc, #264]	; (8000dfc <MTP_ReceiveProcess+0x204>)
 8000cf2:	805a      	strh	r2, [r3, #2]
				if(RXFrameBuffer.length == 0)
 8000cf4:	4b41      	ldr	r3, [pc, #260]	; (8000dfc <MTP_ReceiveProcess+0x204>)
 8000cf6:	885b      	ldrh	r3, [r3, #2]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d103      	bne.n	8000d04 <MTP_ReceiveProcess+0x10c>
				{
					ReceiveProcessState = DATA_RECEIVED;
 8000cfc:	4b40      	ldr	r3, [pc, #256]	; (8000e00 <MTP_ReceiveProcess+0x208>)
 8000cfe:	220b      	movs	r2, #11
 8000d00:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					ReceiveProcessState = LENGTH_BYTE_1_RECEIVED;
				}
				break;
 8000d02:	e072      	b.n	8000dea <MTP_ReceiveProcess+0x1f2>
					ReceiveProcessState = LENGTH_BYTE_1_RECEIVED;
 8000d04:	4b3e      	ldr	r3, [pc, #248]	; (8000e00 <MTP_ReceiveProcess+0x208>)
 8000d06:	2209      	movs	r2, #9
 8000d08:	701a      	strb	r2, [r3, #0]
				break;
 8000d0a:	e06e      	b.n	8000dea <MTP_ReceiveProcess+0x1f2>

			case LENGTH_BYTE_1_RECEIVED:
				*Local_DataBuffer = ReceivedByte;
 8000d0c:	4b40      	ldr	r3, [pc, #256]	; (8000e10 <MTP_ReceiveProcess+0x218>)
 8000d0e:	781a      	ldrb	r2, [r3, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	701a      	strb	r2, [r3, #0]
				Local_DataBuffer++;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	603b      	str	r3, [r7, #0]
				Local_DataCounter++;
 8000d1a:	897b      	ldrh	r3, [r7, #10]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	817b      	strh	r3, [r7, #10]
				if(Local_DataCounter >= RXFrameBuffer.length)
 8000d20:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <MTP_ReceiveProcess+0x204>)
 8000d22:	885b      	ldrh	r3, [r3, #2]
 8000d24:	897a      	ldrh	r2, [r7, #10]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d35e      	bcc.n	8000de8 <MTP_ReceiveProcess+0x1f0>
				{
					ReceiveProcessState = DATA_RECEIVED;
 8000d2a:	4b35      	ldr	r3, [pc, #212]	; (8000e00 <MTP_ReceiveProcess+0x208>)
 8000d2c:	220b      	movs	r2, #11
 8000d2e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000d30:	e05a      	b.n	8000de8 <MTP_ReceiveProcess+0x1f0>

			case DATA_RECEIVED:
				RXFrameBuffer.checksum = ReceivedByte;
 8000d32:	4b37      	ldr	r3, [pc, #220]	; (8000e10 <MTP_ReceiveProcess+0x218>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	4b30      	ldr	r3, [pc, #192]	; (8000dfc <MTP_ReceiveProcess+0x204>)
 8000d3a:	811a      	strh	r2, [r3, #8]
				ReceiveProcessState = CHECKSUM_BYTE_0_RECEIVED;
 8000d3c:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <MTP_ReceiveProcess+0x208>)
 8000d3e:	220d      	movs	r2, #13
 8000d40:	701a      	strb	r2, [r3, #0]
				break;
 8000d42:	e052      	b.n	8000dea <MTP_ReceiveProcess+0x1f2>

			case CHECKSUM_BYTE_0_RECEIVED:
				RXFrameBuffer.checksum |= (((u16)ReceivedByte) << 8);
 8000d44:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <MTP_ReceiveProcess+0x204>)
 8000d46:	891b      	ldrh	r3, [r3, #8]
 8000d48:	b21a      	sxth	r2, r3
 8000d4a:	4b31      	ldr	r3, [pc, #196]	; (8000e10 <MTP_ReceiveProcess+0x218>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	b21b      	sxth	r3, r3
 8000d52:	4313      	orrs	r3, r2
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <MTP_ReceiveProcess+0x204>)
 8000d5a:	811a      	strh	r2, [r3, #8]
				ReceiveProcessState = CHECKSUM_BYTE_1_RECEIVED;
 8000d5c:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <MTP_ReceiveProcess+0x208>)
 8000d5e:	220f      	movs	r2, #15
 8000d60:	701a      	strb	r2, [r3, #0]

				Local_DataBuffer = RXFrameBuffer.Buffer;
 8000d62:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <MTP_ReceiveProcess+0x204>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	603b      	str	r3, [r7, #0]
				for(Local_CHKCounter = 0; Local_CHKCounter < RXFrameBuffer.length; Local_CHKCounter++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	813b      	strh	r3, [r7, #8]
 8000d6c:	e00b      	b.n	8000d86 <MTP_ReceiveProcess+0x18e>
				{
					Local_CheckSum += *Local_DataBuffer;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	88fb      	ldrh	r3, [r7, #6]
 8000d76:	4413      	add	r3, r2
 8000d78:	80fb      	strh	r3, [r7, #6]
					Local_DataBuffer++;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	603b      	str	r3, [r7, #0]
				for(Local_CHKCounter = 0; Local_CHKCounter < RXFrameBuffer.length; Local_CHKCounter++)
 8000d80:	893b      	ldrh	r3, [r7, #8]
 8000d82:	3301      	adds	r3, #1
 8000d84:	813b      	strh	r3, [r7, #8]
 8000d86:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <MTP_ReceiveProcess+0x204>)
 8000d88:	885b      	ldrh	r3, [r3, #2]
 8000d8a:	893a      	ldrh	r2, [r7, #8]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d3ee      	bcc.n	8000d6e <MTP_ReceiveProcess+0x176>
				}
				Local_CheckSum += RXFrameBuffer.ID;
 8000d90:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MTP_ReceiveProcess+0x204>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	4413      	add	r3, r2
 8000d9a:	80fb      	strh	r3, [r7, #6]
				Local_CheckSum += (u8)(RXFrameBuffer.length);
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MTP_ReceiveProcess+0x204>)
 8000d9e:	885b      	ldrh	r3, [r3, #2]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	88fb      	ldrh	r3, [r7, #6]
 8000da6:	4413      	add	r3, r2
 8000da8:	80fb      	strh	r3, [r7, #6]
				Local_CheckSum += (u8)((RXFrameBuffer.length) >> 8);
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MTP_ReceiveProcess+0x204>)
 8000dac:	885b      	ldrh	r3, [r3, #2]
 8000dae:	0a1b      	lsrs	r3, r3, #8
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	4413      	add	r3, r2
 8000dba:	80fb      	strh	r3, [r7, #6]
				if(RXFrameBuffer.checksum == Local_CheckSum)
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MTP_ReceiveProcess+0x204>)
 8000dbe:	891b      	ldrh	r3, [r3, #8]
 8000dc0:	88fa      	ldrh	r2, [r7, #6]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d103      	bne.n	8000dce <MTP_ReceiveProcess+0x1d6>
				{
					ReceiveProcessState = SUCCESS;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MTP_ReceiveProcess+0x208>)
 8000dc8:	2212      	movs	r2, #18
 8000dca:	701a      	strb	r2, [r3, #0]
					return;
 8000dcc:	e011      	b.n	8000df2 <MTP_ReceiveProcess+0x1fa>
				}
				else
				{
					ReceiveProcessState = FAILED;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MTP_ReceiveProcess+0x208>)
 8000dd0:	2211      	movs	r2, #17
 8000dd2:	701a      	strb	r2, [r3, #0]
					return;
 8000dd4:	e00d      	b.n	8000df2 <MTP_ReceiveProcess+0x1fa>
				}
				break;

			default:
				ReceiveProcessState = FAILED;
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <MTP_ReceiveProcess+0x208>)
 8000dd8:	2211      	movs	r2, #17
 8000dda:	701a      	strb	r2, [r3, #0]
				ReceivedByteState = NO_DATA;
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MTP_ReceiveProcess+0x214>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
				return;
 8000de2:	e006      	b.n	8000df2 <MTP_ReceiveProcess+0x1fa>
				break;
 8000de4:	bf00      	nop
 8000de6:	e000      	b.n	8000dea <MTP_ReceiveProcess+0x1f2>
				break;
 8000de8:	bf00      	nop
			}
		}
		Local_Iterator++;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	3301      	adds	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
		if(ReceiveProcessState == WAITING)
 8000df0:	e713      	b.n	8000c1a <MTP_ReceiveProcess+0x22>
	}
}
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000c6c 	.word	0x20000c6c
 8000e00:	20000038 	.word	0x20000038
 8000e04:	20000c88 	.word	0x20000c88
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	2000003a 	.word	0x2000003a
 8000e10:	20000c78 	.word	0x20000c78

08000e14 <MTP_ReceiveData>:

STD_ERR MTP_ReceiveData(MTP_MSG_t * msg, u32 CyclesToBreak)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
	RXFrameBuffer.Buffer = msg->Buffer;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <MTP_ReceiveData+0x58>)
 8000e24:	6053      	str	r3, [r2, #4]
	MTPCyclesToBreak = CyclesToBreak;
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <MTP_ReceiveData+0x5c>)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	6013      	str	r3, [r2, #0]

	UART_Enable();
 8000e2c:	f7ff fd8c 	bl	8000948 <UART_Enable>

	MTP_ReceiveProcess();
 8000e30:	f7ff fee2 	bl	8000bf8 <MTP_ReceiveProcess>

	UART_Disable();
 8000e34:	f7ff fdb8 	bl	80009a8 <UART_Disable>
	if(ReceiveProcessState == SUCCESS)
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MTP_ReceiveData+0x60>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b12      	cmp	r3, #18
 8000e40:	d10c      	bne.n	8000e5c <MTP_ReceiveData+0x48>
	{
		ReceiveProcessState = STOPPED;
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MTP_ReceiveData+0x60>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
		msg->ID = (RXFrameBuffer.ID);
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <MTP_ReceiveData+0x58>)
 8000e4a:	781a      	ldrb	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	701a      	strb	r2, [r3, #0]
		msg->length = (RXFrameBuffer.length);
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <MTP_ReceiveData+0x58>)
 8000e52:	885a      	ldrh	r2, [r3, #2]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	811a      	strh	r2, [r3, #8]
		return NO_ERR;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e003      	b.n	8000e64 <MTP_ReceiveData+0x50>
	}
	else
	{
		ReceiveProcessState = STOPPED;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <MTP_ReceiveData+0x60>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
		return ERR;
 8000e62:	2301      	movs	r3, #1
	}
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000c6c 	.word	0x20000c6c
 8000e70:	20000c88 	.word	0x20000c88
 8000e74:	20000038 	.word	0x20000038

08000e78 <MTP_SendProcess>:

void MTP_SendProcess(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
	u32 Local_Iterator = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
	u16 Local_DataCounter = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	817b      	strh	r3, [r7, #10]
	u8 * Local_DataBuffer = TXFrameBuffer.Buffer;
 8000e86:	4b53      	ldr	r3, [pc, #332]	; (8000fd4 <MTP_SendProcess+0x15c>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	607b      	str	r3, [r7, #4]

	UART_WriteToBuffer(MTP_START_BYTE);
 8000e8c:	2025      	movs	r0, #37	; 0x25
 8000e8e:	f7ff fdbb 	bl	8000a08 <UART_WriteToBuffer>
	SendProcessState = START_BYTE_SENT;
 8000e92:	4b51      	ldr	r3, [pc, #324]	; (8000fd8 <MTP_SendProcess+0x160>)
 8000e94:	2204      	movs	r2, #4
 8000e96:	701a      	strb	r2, [r3, #0]
	SentByteState = BUFFER_EMPTY;
 8000e98:	4b50      	ldr	r3, [pc, #320]	; (8000fdc <MTP_SendProcess+0x164>)
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		if(Local_Iterator >= MTPWaitCycles)
 8000e9e:	4b50      	ldr	r3, [pc, #320]	; (8000fe0 <MTP_SendProcess+0x168>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d303      	bcc.n	8000eb0 <MTP_SendProcess+0x38>
		{
			SendProcessState = FAILED;
 8000ea8:	4b4b      	ldr	r3, [pc, #300]	; (8000fd8 <MTP_SendProcess+0x160>)
 8000eaa:	2211      	movs	r2, #17
 8000eac:	701a      	strb	r2, [r3, #0]
			break;
 8000eae:	e08e      	b.n	8000fce <MTP_SendProcess+0x156>
		}

		if(SentByteState == BUFFER_EMPTY)
 8000eb0:	4b4a      	ldr	r3, [pc, #296]	; (8000fdc <MTP_SendProcess+0x164>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d17c      	bne.n	8000fb4 <MTP_SendProcess+0x13c>
		{
			Local_Iterator = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
			SentByteState = SENDING_BYTE;
 8000ebe:	4b47      	ldr	r3, [pc, #284]	; (8000fdc <MTP_SendProcess+0x164>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]

			switch(SendProcessState)
 8000ec4:	4b44      	ldr	r3, [pc, #272]	; (8000fd8 <MTP_SendProcess+0x160>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	2b0c      	cmp	r3, #12
 8000ece:	d86c      	bhi.n	8000faa <MTP_SendProcess+0x132>
 8000ed0:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <MTP_SendProcess+0x60>)
 8000ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed6:	bf00      	nop
 8000ed8:	08000f0d 	.word	0x08000f0d
 8000edc:	08000fab 	.word	0x08000fab
 8000ee0:	08000f1d 	.word	0x08000f1d
 8000ee4:	08000fab 	.word	0x08000fab
 8000ee8:	08000f2f 	.word	0x08000f2f
 8000eec:	08000fab 	.word	0x08000fab
 8000ef0:	08000f55 	.word	0x08000f55
 8000ef4:	08000fab 	.word	0x08000fab
 8000ef8:	08000f7b 	.word	0x08000f7b
 8000efc:	08000fab 	.word	0x08000fab
 8000f00:	08000f8d 	.word	0x08000f8d
 8000f04:	08000fab 	.word	0x08000fab
 8000f08:	08000fa3 	.word	0x08000fa3
			{
			case START_BYTE_SENT:
				ByteToSend = TXFrameBuffer.ID;
 8000f0c:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <MTP_SendProcess+0x15c>)
 8000f0e:	781a      	ldrb	r2, [r3, #0]
 8000f10:	4b34      	ldr	r3, [pc, #208]	; (8000fe4 <MTP_SendProcess+0x16c>)
 8000f12:	701a      	strb	r2, [r3, #0]
				SendProcessState = ID_SENT;
 8000f14:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <MTP_SendProcess+0x160>)
 8000f16:	2206      	movs	r2, #6
 8000f18:	701a      	strb	r2, [r3, #0]
				break;
 8000f1a:	e04b      	b.n	8000fb4 <MTP_SendProcess+0x13c>

			case ID_SENT:
				ByteToSend = (u8)(TXFrameBuffer.length);
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <MTP_SendProcess+0x15c>)
 8000f1e:	885b      	ldrh	r3, [r3, #2]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4b30      	ldr	r3, [pc, #192]	; (8000fe4 <MTP_SendProcess+0x16c>)
 8000f24:	701a      	strb	r2, [r3, #0]
				SendProcessState = LENGTH_BYTE_0_SENT;
 8000f26:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <MTP_SendProcess+0x160>)
 8000f28:	2208      	movs	r2, #8
 8000f2a:	701a      	strb	r2, [r3, #0]
				break;
 8000f2c:	e042      	b.n	8000fb4 <MTP_SendProcess+0x13c>

			case LENGTH_BYTE_0_SENT:
				ByteToSend = (u8)((TXFrameBuffer.length) >> 8);
 8000f2e:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <MTP_SendProcess+0x15c>)
 8000f30:	885b      	ldrh	r3, [r3, #2]
 8000f32:	0a1b      	lsrs	r3, r3, #8
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	4b2a      	ldr	r3, [pc, #168]	; (8000fe4 <MTP_SendProcess+0x16c>)
 8000f3a:	701a      	strb	r2, [r3, #0]
				if(TXFrameBuffer.length == 0)
 8000f3c:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <MTP_SendProcess+0x15c>)
 8000f3e:	885b      	ldrh	r3, [r3, #2]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d103      	bne.n	8000f4c <MTP_SendProcess+0xd4>
				{
					SendProcessState = DATA_SENT;
 8000f44:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <MTP_SendProcess+0x160>)
 8000f46:	220c      	movs	r2, #12
 8000f48:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					SendProcessState = LENGTH_BYTE_1_SENT;
				}
				break;
 8000f4a:	e033      	b.n	8000fb4 <MTP_SendProcess+0x13c>
					SendProcessState = LENGTH_BYTE_1_SENT;
 8000f4c:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <MTP_SendProcess+0x160>)
 8000f4e:	220a      	movs	r2, #10
 8000f50:	701a      	strb	r2, [r3, #0]
				break;
 8000f52:	e02f      	b.n	8000fb4 <MTP_SendProcess+0x13c>

			case LENGTH_BYTE_1_SENT:
				ByteToSend = *Local_DataBuffer;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	781a      	ldrb	r2, [r3, #0]
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <MTP_SendProcess+0x16c>)
 8000f5a:	701a      	strb	r2, [r3, #0]
				Local_DataBuffer++;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	607b      	str	r3, [r7, #4]
				Local_DataCounter++;
 8000f62:	897b      	ldrh	r3, [r7, #10]
 8000f64:	3301      	adds	r3, #1
 8000f66:	817b      	strh	r3, [r7, #10]
				if(Local_DataCounter >= TXFrameBuffer.length)
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <MTP_SendProcess+0x15c>)
 8000f6a:	885b      	ldrh	r3, [r3, #2]
 8000f6c:	897a      	ldrh	r2, [r7, #10]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d31f      	bcc.n	8000fb2 <MTP_SendProcess+0x13a>
				{
					SendProcessState = DATA_SENT;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MTP_SendProcess+0x160>)
 8000f74:	220c      	movs	r2, #12
 8000f76:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000f78:	e01b      	b.n	8000fb2 <MTP_SendProcess+0x13a>

			case DATA_SENT:
				ByteToSend = (u8)(TXFrameBuffer.checksum);
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MTP_SendProcess+0x15c>)
 8000f7c:	891b      	ldrh	r3, [r3, #8]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <MTP_SendProcess+0x16c>)
 8000f82:	701a      	strb	r2, [r3, #0]
				SendProcessState = CHECKSUM_BYTE_0_SENT;
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MTP_SendProcess+0x160>)
 8000f86:	220e      	movs	r2, #14
 8000f88:	701a      	strb	r2, [r3, #0]
				break;
 8000f8a:	e013      	b.n	8000fb4 <MTP_SendProcess+0x13c>

			case CHECKSUM_BYTE_0_SENT:
				ByteToSend = (u8)((TXFrameBuffer.checksum) >> 8);
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MTP_SendProcess+0x15c>)
 8000f8e:	891b      	ldrh	r3, [r3, #8]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <MTP_SendProcess+0x16c>)
 8000f98:	701a      	strb	r2, [r3, #0]
				SendProcessState = CHECKSUM_BYTE_1_SENT;
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MTP_SendProcess+0x160>)
 8000f9c:	2210      	movs	r2, #16
 8000f9e:	701a      	strb	r2, [r3, #0]
				break;
 8000fa0:	e008      	b.n	8000fb4 <MTP_SendProcess+0x13c>

			case CHECKSUM_BYTE_1_SENT:
				SentByteState = FINISHED;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MTP_SendProcess+0x164>)
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	701a      	strb	r2, [r3, #0]
				break;
 8000fa8:	e004      	b.n	8000fb4 <MTP_SendProcess+0x13c>

			default:
				SendProcessState = FAILED;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MTP_SendProcess+0x160>)
 8000fac:	2211      	movs	r2, #17
 8000fae:	701a      	strb	r2, [r3, #0]
				return;
 8000fb0:	e00d      	b.n	8000fce <MTP_SendProcess+0x156>
				break;
 8000fb2:	bf00      	nop
			}
		}

		if(SentByteState == UNINITIALIZED)
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MTP_SendProcess+0x164>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d103      	bne.n	8000fc6 <MTP_SendProcess+0x14e>
		{
			SendProcessState = SUCCESS;
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MTP_SendProcess+0x160>)
 8000fc0:	2212      	movs	r2, #18
 8000fc2:	701a      	strb	r2, [r3, #0]
			return;
 8000fc4:	e003      	b.n	8000fce <MTP_SendProcess+0x156>
		}
		Local_Iterator++;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
		if(Local_Iterator >= MTPWaitCycles)
 8000fcc:	e767      	b.n	8000e9e <MTP_SendProcess+0x26>
	}
}
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000c7c 	.word	0x20000c7c
 8000fd8:	20000039 	.word	0x20000039
 8000fdc:	2000003b 	.word	0x2000003b
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000c8c 	.word	0x20000c8c

08000fe8 <MTP_SendData>:

STD_ERR MTP_SendData(MTP_MSG_t * msg)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	u16 Local_CHKCounter = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	81fb      	strh	r3, [r7, #14]
	u16 Local_CheckSum = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	81bb      	strh	r3, [r7, #12]
	u8 * Local_DataBuffer = (msg->Buffer);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	60bb      	str	r3, [r7, #8]

	TXFrameBuffer.Buffer = (msg->Buffer);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	4a27      	ldr	r2, [pc, #156]	; (80010a0 <MTP_SendData+0xb8>)
 8001004:	6053      	str	r3, [r2, #4]
	TXFrameBuffer.ID = (msg->ID);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <MTP_SendData+0xb8>)
 800100c:	701a      	strb	r2, [r3, #0]
	TXFrameBuffer.length = (msg->length);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	891a      	ldrh	r2, [r3, #8]
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <MTP_SendData+0xb8>)
 8001014:	805a      	strh	r2, [r3, #2]

	for(Local_CHKCounter = 0; Local_CHKCounter < (msg->length); Local_CHKCounter++)
 8001016:	2300      	movs	r3, #0
 8001018:	81fb      	strh	r3, [r7, #14]
 800101a:	e00b      	b.n	8001034 <MTP_SendData+0x4c>
	{
		Local_CheckSum += *Local_DataBuffer;
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b29a      	uxth	r2, r3
 8001022:	89bb      	ldrh	r3, [r7, #12]
 8001024:	4413      	add	r3, r2
 8001026:	81bb      	strh	r3, [r7, #12]
		Local_DataBuffer++;
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	3301      	adds	r3, #1
 800102c:	60bb      	str	r3, [r7, #8]
	for(Local_CHKCounter = 0; Local_CHKCounter < (msg->length); Local_CHKCounter++)
 800102e:	89fb      	ldrh	r3, [r7, #14]
 8001030:	3301      	adds	r3, #1
 8001032:	81fb      	strh	r3, [r7, #14]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	891b      	ldrh	r3, [r3, #8]
 8001038:	89fa      	ldrh	r2, [r7, #14]
 800103a:	429a      	cmp	r2, r3
 800103c:	d3ee      	bcc.n	800101c <MTP_SendData+0x34>
	}
	Local_CheckSum += (msg->ID);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	b29a      	uxth	r2, r3
 8001044:	89bb      	ldrh	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	81bb      	strh	r3, [r7, #12]
	Local_CheckSum += (u8)(msg->length);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	891b      	ldrh	r3, [r3, #8]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	b29a      	uxth	r2, r3
 8001052:	89bb      	ldrh	r3, [r7, #12]
 8001054:	4413      	add	r3, r2
 8001056:	81bb      	strh	r3, [r7, #12]
	Local_CheckSum += (u8)((msg->length) >> 8);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	891b      	ldrh	r3, [r3, #8]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	b29b      	uxth	r3, r3
 8001060:	b2db      	uxtb	r3, r3
 8001062:	b29a      	uxth	r2, r3
 8001064:	89bb      	ldrh	r3, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	81bb      	strh	r3, [r7, #12]
	TXFrameBuffer.checksum = Local_CheckSum;
 800106a:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <MTP_SendData+0xb8>)
 800106c:	89bb      	ldrh	r3, [r7, #12]
 800106e:	8113      	strh	r3, [r2, #8]

	UART_Enable();
 8001070:	f7ff fc6a 	bl	8000948 <UART_Enable>

	MTP_SendProcess();
 8001074:	f7ff ff00 	bl	8000e78 <MTP_SendProcess>

	UART_Disable();
 8001078:	f7ff fc96 	bl	80009a8 <UART_Disable>

	if(SendProcessState == SUCCESS)
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MTP_SendData+0xbc>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b12      	cmp	r3, #18
 8001084:	d104      	bne.n	8001090 <MTP_SendData+0xa8>
	{
		SendProcessState = STOPPED;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <MTP_SendData+0xbc>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
		return NO_ERR;
 800108c:	2300      	movs	r3, #0
 800108e:	e003      	b.n	8001098 <MTP_SendData+0xb0>
	}
	else
	{
		SendProcessState = STOPPED;
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <MTP_SendData+0xbc>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
		return ERR;
 8001096:	2301      	movs	r3, #1
	}
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000c7c 	.word	0x20000c7c
 80010a4:	20000039 	.word	0x20000039

080010a8 <__libc_init_array>:
 80010a8:	b570      	push	{r4, r5, r6, lr}
 80010aa:	2500      	movs	r5, #0
 80010ac:	4e0c      	ldr	r6, [pc, #48]	; (80010e0 <__libc_init_array+0x38>)
 80010ae:	4c0d      	ldr	r4, [pc, #52]	; (80010e4 <__libc_init_array+0x3c>)
 80010b0:	1ba4      	subs	r4, r4, r6
 80010b2:	10a4      	asrs	r4, r4, #2
 80010b4:	42a5      	cmp	r5, r4
 80010b6:	d109      	bne.n	80010cc <__libc_init_array+0x24>
 80010b8:	f000 f81a 	bl	80010f0 <_init>
 80010bc:	2500      	movs	r5, #0
 80010be:	4e0a      	ldr	r6, [pc, #40]	; (80010e8 <__libc_init_array+0x40>)
 80010c0:	4c0a      	ldr	r4, [pc, #40]	; (80010ec <__libc_init_array+0x44>)
 80010c2:	1ba4      	subs	r4, r4, r6
 80010c4:	10a4      	asrs	r4, r4, #2
 80010c6:	42a5      	cmp	r5, r4
 80010c8:	d105      	bne.n	80010d6 <__libc_init_array+0x2e>
 80010ca:	bd70      	pop	{r4, r5, r6, pc}
 80010cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010d0:	4798      	blx	r3
 80010d2:	3501      	adds	r5, #1
 80010d4:	e7ee      	b.n	80010b4 <__libc_init_array+0xc>
 80010d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010da:	4798      	blx	r3
 80010dc:	3501      	adds	r5, #1
 80010de:	e7f2      	b.n	80010c6 <__libc_init_array+0x1e>
 80010e0:	08001108 	.word	0x08001108
 80010e4:	08001108 	.word	0x08001108
 80010e8:	08001108 	.word	0x08001108
 80010ec:	0800110c 	.word	0x0800110c

080010f0 <_init>:
 80010f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010f2:	bf00      	nop
 80010f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010f6:	bc08      	pop	{r3}
 80010f8:	469e      	mov	lr, r3
 80010fa:	4770      	bx	lr

080010fc <_fini>:
 80010fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fe:	bf00      	nop
 8001100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001102:	bc08      	pop	{r3}
 8001104:	469e      	mov	lr, r3
 8001106:	4770      	bx	lr
